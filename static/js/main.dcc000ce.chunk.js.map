{"version":3,"sources":["redux/modeSlice.js","components/Nav/Nav.jsx","redux/countrySlice.js","components/Country/Country.jsx","components/FilterInput/FilterInput.jsx","components/SearchInput/SearchInput.jsx","pages/homepage/Homepage.jsx","components/BackButton/BackButton.jsx","pages/countrypage/Countrypage.jsx","App.js","reportWebVitals.js","redux/store.js","index.js"],"names":["modeSlice","createSlice","name","initialState","lightMode","reducers","toggleMode","state","actions","Nav","mode","useSelector","dispatch","useDispatch","toggle","className","onClick","countrySlice","alpha3Code","setCountry","action","payload","Country","capital","region","population","flag","history","useHistory","console","log","push","src","alt","toLocaleString","FilterInput","setRegion","value","onChange","e","target","selected","disabled","SearchInput","nameCountry","setNameCountry","type","placeholder","Homepage","useState","countries","setCountries","fetchAll","a","fetch","fetchData","json","data","displayData","i","Math","floor","random","length","fetchByName","fetchByRegion","useEffect","map","id","otherProps","BackButton","Countrypage","loading","setLoading","place","setPlace","routeChangeState","setRouteChangeState","country","fetchCountry","nativeName","subregion","topLevelDomain","currencies","languages","borders","language","list","border","routeChange","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","combineReducers","persistConfig","key","storage","persistedReducer","persistReducer","store","configureStore","reducer","persistor","persistStore","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dcc000ce.chunk.js","sourcesContent":["import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    lightMode: true\r\n}\r\n\r\nconst modeSlice = createSlice({\r\n    name: 'mode',\r\n    initialState,\r\n    reducers: {\r\n        toggleMode: state => {state.lightMode = !state.lightMode}\r\n    }\r\n});\r\n\r\nexport const {\r\n    toggleMode\r\n} = modeSlice.actions\r\nexport default modeSlice.reducer","import React from 'react'\r\nimport { BsToggleOff , BsToggleOn} from 'react-icons/bs'\r\nimport { useSelector,useDispatch } from 'react-redux'\r\nimport {toggleMode} from '../../redux/modeSlice'\r\nimport './Nav.scss'\r\n\r\nconst Nav = () => {\r\n    const mode = useSelector(state => state.mode.lightMode)\r\n    const dispatch = useDispatch()\r\n    \r\n    const toggle = () =>{\r\n        dispatch(toggleMode())\r\n    }\r\n    return (\r\n        <nav className={!mode? 'dark-theme' : ''}>\r\n            <div className=\"nav-title\">\r\n                <h1>Where in the world?</h1>\r\n            </div>\r\n            <div className=\"mode-toggle\">\r\n                {mode? \r\n                <BsToggleOn className='toggle-icon' onClick={toggle}/>\r\n                :\r\n                <BsToggleOff className='toggle-icon' onClick={toggle}/>}\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nexport default Nav\r\n","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = {\r\n    alpha3Code: ''\r\n}\r\n\r\nconst countrySlice = createSlice({\r\n    name: 'country',\r\n    initialState,\r\n    reducers: {\r\n        setCountry: (state,action) =>{\r\n            state.alpha3Code = action.payload\r\n        }\r\n    }\r\n});\r\n\r\nexport const {\r\n    setCountry\r\n} = countrySlice.actions\r\nexport default countrySlice.reducer","import React from 'react'\r\nimport './Country.scss'\r\nimport { setCountry } from '../../redux/countrySlice'\r\nimport { useDispatch } from 'react-redux'\r\nimport { useHistory } from 'react-router'\r\nconst Country = ({alpha3Code,capital,name,region,population,flag}) => {\r\n    const history = useHistory()\r\n    const dispatch = useDispatch()\r\n    const routeChange= () =>{\r\n        console.log(alpha3Code);\r\n        dispatch(setCountry(alpha3Code))\r\n        console.log(dispatch(setCountry(alpha3Code)));\r\n        history.push(`/country/${alpha3Code}`)\r\n    }\r\n    return (\r\n        <div className='country-wrapper' onClick={routeChange}>\r\n            <div className=\"country-flag\">\r\n                <img src={flag} alt={name} />\r\n            </div>\r\n            <div className=\"country-info\">\r\n                <h3>{name}</h3>\r\n                <ul>\r\n                    <li><span>Population:</span> {population.toLocaleString()}</li>\r\n                    <li><span>Region:</span> {region}</li>\r\n                    <li><span>Capital:</span> {capital}</li>\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Country\r\n","import React from 'react'\r\nimport './FilterInput.scss'\r\nconst FilterInput = ({region,setRegion}) => {\r\n    return (\r\n      <div className=\"filter-input\">\r\n        <select value={region} onChange={e=>setRegion(e.target.value)}>\r\n            <option value=\"\"selected disabled className='disabled'>Filter by Region</option>\r\n            <option value=\"africa\">Africa</option>\r\n            <option value=\"americas\">America</option>\r\n            <option value=\"asia\">Asia</option>\r\n            <option value=\"europe\">Europe</option>\r\n            <option value=\"oceania\">Oceania</option>\r\n        </select>\r\n      </div>\r\n    );\r\n}\r\n\r\nexport default FilterInput\r\n","import React from 'react'\r\nimport { AiOutlineSearch } from 'react-icons/ai'\r\nimport './SearchInput.scss'\r\nconst SearchInput = ({nameCountry,setNameCountry}) => {\r\n    return (\r\n        <div className='search-input'>\r\n            <form>\r\n                <input type=\"text\" placeholder='Search for a country...'\r\n                value={nameCountry}\r\n                onChange={e=>setNameCountry(e.target.value)}\r\n                />\r\n            </form>\r\n            <AiOutlineSearch className='icon'/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default SearchInput\r\n","import React,{useState,useEffect} from 'react'\r\nimport Country from '../../components/Country/Country';\r\nimport FilterInput from '../../components/FilterInput/FilterInput';\r\nimport SearchInput from '../../components/SearchInput/SearchInput';\r\nimport './Homepage.scss'\r\nconst Homepage = () => {\r\n    const [countries,setCountries] =useState([]);\r\n    const [region,setRegion] = useState('')\r\n    const [nameCountry,setNameCountry] = useState('')\r\n    const fetchAll = async () =>{\r\n        const fetchData = await fetch(\"https://restcountries.eu/rest/v2/all\");\r\n        const data = await fetchData.json()\r\n        let displayData = [];\r\n        for(let i = 0; i < 8; i++){\r\n            displayData.push(data[Math.floor(Math.random() * data.length)]);\r\n        }\r\n        setCountries(displayData)\r\n    }\r\n    const fetchByName = async () =>{\r\n        const fetchData = await fetch(\r\n          `https://restcountries.eu/rest/v2/name/${nameCountry}`\r\n        );\r\n        const data = await fetchData.json()\r\n        console.log(data);\r\n        setCountries(data)\r\n    }\r\n    const fetchByRegion = async () =>{\r\n        const fetchData = await fetch(\r\n          `https://restcountries.eu/rest/v2/region/${region}`\r\n        );\r\n        const data = await fetchData.json();\r\n        console.log(data);\r\n        setCountries(data);\r\n    }\r\n    useEffect(() => {\r\n        fetchAll()\r\n    },[])\r\n    useEffect(()=>{\r\n        fetchByName()\r\n    },[nameCountry])\r\n    useEffect(()=>{\r\n        fetchByRegion()\r\n    },[region])\r\n    return (\r\n        <>\r\n        <section className=\"filters\">\r\n        <SearchInput setNameCountry={setNameCountry} nameCountry={nameCountry}/>\r\n        <FilterInput region={region} setRegion={setRegion}/>\r\n        </section>\r\n        <section className=\"countries\">\r\n            {countries.length > 0 &&\r\n            countries.map(({id,...otherProps})=>(\r\n                <Country key={id} {...otherProps}/>\r\n                ))}\r\n        </section>\r\n                </>\r\n    )\r\n}\r\n\r\nexport default Homepage\r\n","import React from 'react'\r\nimport './BackButton.scss'\r\nimport { BiArrowBack } from 'react-icons/bi'\r\nimport { useHistory } from 'react-router'\r\nimport { useSelector } from 'react-redux'\r\n\r\nconst BackButton = () => {\r\n  const mode = useSelector(state => state.mode.lightMode)\r\n    const history = useHistory()\r\n    return (\r\n      <>\r\n        <button\r\n          className={!mode ? \"btn dark-theme\" : \"btn\"}\r\n          onClick={() => history.push(\"/\")}\r\n        >\r\n          <BiArrowBack className=\"btn-icon\" /> Back\r\n        </button>\r\n      </>\r\n    );\r\n}\r\n\r\nexport default BackButton\r\n","import React,{useState,useEffect} from 'react'\r\nimport {useSelector} from 'react-redux'\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useHistory } from \"react-router\";\r\nimport { setCountry } from '../../redux/countrySlice';\r\nimport BackButton from '../../components/BackButton/BackButton';\r\nimport './Countrypage.scss'\r\n\r\nconst Countrypage = () => {\r\n    const [loading,setLoading] = useState(true)\r\n    const [place,setPlace] = useState([])\r\n    const [routeChangeState,setRouteChangeState] = useState(false)\r\n    const country = useSelector(state => state.country.alpha3Code)\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n    const fetchCountry = async () =>{\r\n        try {\r\n            const fetchData = await fetch(\r\n              `https://restcountries.eu/rest/v2/alpha/${country}`\r\n            );\r\n            const data = await fetchData.json();\r\n            setPlace(data)\r\n            setLoading(false)\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        \r\n    }\r\n    const {\r\n      name,\r\n      nativeName,\r\n      flag,\r\n      population,\r\n      region,\r\n      subregion,\r\n      capital,\r\n      topLevelDomain,\r\n      currencies,\r\n      languages,\r\n      borders,\r\n    } = place;\r\n    const routeChange = (border) => {\r\n      console.log(border);\r\n      dispatch(setCountry(border));\r\n      console.log(dispatch(setCountry(border)));\r\n      history.push(`/country/${border}`);\r\n      setRouteChangeState(true)\r\n    };\r\n    useEffect(()=>{\r\n        fetchCountry()\r\n        setRouteChangeState(false)\r\n        },[routeChangeState])\r\n        if(loading){\r\n            return <div className=\"loading\"><h1>Loading...</h1></div>\r\n        }else{          \r\n        return (\r\n          <div className=\"country-page\">\r\n              <div className=\"button\">\r\n              <BackButton/>\r\n              </div>\r\n            <div className=\"place\">\r\n              <div className=\"flag\">\r\n                <img src={flag} alt={name} />\r\n              </div>\r\n              <div className=\"info\">\r\n                  <h1>{name}</h1>\r\n                <div className=\"main-info\">\r\n                  <div className=\"main-info--top\">\r\n                  <ul>\r\n                    <li>\r\n                      <span>Native Name: </span>\r\n                      {nativeName}\r\n                    </li>\r\n                    <li>\r\n                      <span>Population: </span>\r\n                      {population.toLocaleString()}\r\n                    </li>\r\n                    <li>\r\n                      <span>Region: </span>\r\n                      {region}\r\n                    </li>\r\n                    <li>\r\n                      <span>Sub Region: </span>\r\n                      {subregion}\r\n                    </li>\r\n                    <li>\r\n                      <span>Capital: </span>\r\n                      {capital}\r\n                    </li>\r\n                    </ul>\r\n                      </div>\r\n                      <div className=\"main-info--bottom\">\r\n            <ul>\r\n                    <li>\r\n                      <span>Top Level Domain: </span>\r\n                      {topLevelDomain}\r\n                    </li>\r\n                    <li>\r\n                      <span>Currency: </span>\r\n                      {currencies[0].name}\r\n                    </li>\r\n                    <li>\r\n                      <span>Languages: </span>\r\n                      {languages.map((language) => {\r\n                          let list = [];\r\n                          list.push(`${language.name} `);\r\n                          return list;\r\n                        })}\r\n                    </li>\r\n                  </ul>\r\n                        </div>\r\n                </div>\r\n                <div className=\"borders-info\">\r\n                  <span>Border Countries:</span>\r\n                  {borders.map((border) => {\r\n                    return <span className=\"border\" onClick={()=>routeChange(border)}>{border}</span>;\r\n                  })}\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        );\r\n}\r\n}\r\n\r\nexport default Countrypage\r\n","import { Switch,Route } from 'react-router';\nimport Nav from './components/Nav/Nav';\nimport Homepage from './pages/homepage/Homepage';\nimport Countrypage from './pages/countrypage/Countrypage';\nimport { useSelector } from 'react-redux';\nimport './App.scss';\n\nfunction App() {\n  const mode = useSelector(state => state.mode.lightMode)\n  return (\n    <div className={!mode ? \"app dark-theme\" : \"app\"}>\n      <Nav />\n      <Switch>\n        <Route exact path=\"/\" component={Homepage} />\n        <Route exact path=\"/country/:name\" component={Countrypage} />\n      </Switch>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {configureStore} from '@reduxjs/toolkit';\r\nimport storage from 'redux-persist/lib/storage';\r\nimport { combineReducers } from 'redux';\r\nimport { persistReducer } from 'redux-persist'\r\nimport modeSlice from './modeSlice';\r\nimport countrySlice from './countrySlice';\r\nconst reducers = combineReducers({\r\n  mode: modeSlice,\r\n  country: countrySlice,\r\n});\r\nconst persistConfig = {\r\n    key: 'root',\r\n    storage\r\n}\r\nconst persistedReducer = persistReducer(persistConfig,reducers)\r\nexport const store = configureStore({\r\n    reducer: persistedReducer\r\n})\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {HashRouter} from 'react-router-dom'\nimport {store} from './redux/store';\nimport {PersistGate} from 'redux-persist/es/integration/react'\nimport {persistStore} from 'redux-persist'\nconst persistor = persistStore(store)\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <PersistGate loading={null} persistor={persistor}>\n    <HashRouter>\n    <App />\n    </HashRouter>\n      </PersistGate>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}